// <auto-generated />
using System;
using Messenger.DAL.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Messenger.DAL.Migrations
{
    [DbContext(typeof(MessengerDBContext))]
    [Migration("20241214213647_AddUserTableReally")]
    partial class AddUserTableReally
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Messenger.DAL.Entities.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int?>("LastMessageId")
                        .HasColumnType("int");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ChatId");

                    b.HasIndex("LastMessageId")
                        .IsUnique()
                        .HasFilter("[LastMessageId] IS NOT NULL");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Connection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionId"));

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("ConnectionId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("MessageOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStatusChanged")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("MessageOwnerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.MessageReceiver", b =>
                {
                    b.Property<int>("MessageReceiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageReceiverId"));

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeRead")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserReceiverId")
                        .HasColumnType("int");

                    b.HasKey("MessageReceiverId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserReceiverId");

                    b.ToTable("MessageReceivers");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoBlobId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("Tag")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.UserContact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<int>("ContactProfileId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalProfileId")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactProfileId");

                    b.HasIndex("PersonalProfileId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.UserOfChat", b =>
                {
                    b.Property<int>("UserOfChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserOfChatId"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserOfChatId");

                    b.HasIndex("ChatId");

                    b.HasIndex("ProfileId");

                    b.ToTable("UserOfChats");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Chat", b =>
                {
                    b.HasOne("Messenger.DAL.Entities.Message", "LastMessage")
                        .WithOne("Chat")
                        .HasForeignKey("Messenger.DAL.Entities.Chat", "LastMessageId");

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Connection", b =>
                {
                    b.HasOne("Messenger.DAL.Entities.Profile", "Profile")
                        .WithMany("Connections")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Message", b =>
                {
                    b.HasOne("Messenger.DAL.Entities.UserOfChat", "MessageOwner")
                        .WithMany("Messages")
                        .HasForeignKey("MessageOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageOwner");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.MessageReceiver", b =>
                {
                    b.HasOne("Messenger.DAL.Entities.Message", "Message")
                        .WithMany("Receivers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DAL.Entities.UserOfChat", "UserReceiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("UserReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("UserReceiver");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Profile", b =>
                {
                    b.HasOne("Messenger.DAL.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Messenger.DAL.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.UserContact", b =>
                {
                    b.HasOne("Messenger.DAL.Entities.Profile", "ContactProfile")
                        .WithMany("ContactUserContacts")
                        .HasForeignKey("ContactProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Messenger.DAL.Entities.Profile", "PersonalProfile")
                        .WithMany("PersonalUserContacts")
                        .HasForeignKey("PersonalProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactProfile");

                    b.Navigation("PersonalProfile");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.UserOfChat", b =>
                {
                    b.HasOne("Messenger.DAL.Entities.Chat", "Chat")
                        .WithMany("UsersOfChat")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.DAL.Entities.Profile", "Profile")
                        .WithMany("UserOfChats")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Chat", b =>
                {
                    b.Navigation("UsersOfChat");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Message", b =>
                {
                    b.Navigation("Chat")
                        .IsRequired();

                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.Profile", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("ContactUserContacts");

                    b.Navigation("PersonalUserContacts");

                    b.Navigation("UserOfChats");
                });

            modelBuilder.Entity("Messenger.DAL.Entities.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger.DAL.Entities.UserOfChat", b =>
                {
                    b.Navigation("MessageReceivers");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
